{"version":3,"sources":["components/formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","console","log","type","placeholder","onChange","protoType","PropTypes","func","isRequired","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo2","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b25a40bf.chunk.js","sourcesContent":["import React, {Fragment, useState} from 'react';\r\n// trae un generador de ID aleatoria \r\nimport { v4 as uuid } from 'uuid';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    //Crear State de Citas\r\n    const [cita,actualizarCita] = useState(\r\n        {\r\n            mascota:\"\",\r\n            propietario:\"\",\r\n            fecha:\"\",\r\n            hora:\"\",\r\n            sintomas:\"\"\r\n        }\r\n    );\r\n    const [error,actualizarError] = useState(false)\r\n\r\n    //Funcion que se ejecuta cada vez que un usuario escribe en el input\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value\r\n        })\r\n    };\r\n    // Extraer los valores\r\n    const {mascota,propietario,fecha,hora,sintomas} = cita;\r\n\r\n    // cuando el propietario presiona para tener la cita\r\n    const submitCita = e =>{\r\n        e.preventDefault();\r\n    \r\n        //Validar   \r\n        if (mascota.trim()=== \"\" || propietario.trim()=== \"\" || fecha.trim()=== \"\" || hora.trim()=== \"\" || sintomas.trim()=== \"\" ) {\r\n            actualizarError(true)\r\n            return;\r\n        } \r\n\r\n        //Eliminar Validacion\r\n        actualizarError(false);\r\n        //Asignar un ID\r\n            cita.id = uuid();\r\n            console.log(cita)\r\n\r\n        // Crear la cita\r\n        crearCita(cita)\r\n\r\n        // Reiniciar el form\r\n        actualizarCita({\r\n            mascota:\"\",\r\n            propietario:\"\",\r\n            fecha:\"\",\r\n            hora:\"\",\r\n            sintomas:\"\"\r\n        }\r\n        )\r\n\r\n    }\r\n    //{ error ? <p className=\"alert-error\"> Todos los campos son Obligatorios <p/> : null}\r\n\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            {error ? <p className=\"alerta-error\">Todos los campos son Obligatorios</p>    :null}\r\n\r\n            <form   \r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                type=\"text\"\r\n                name=\"mascota\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre Mascota\"\r\n                onChange={actualizarState}\r\n                value={mascota}\r\n                />\r\n            \r\n           \r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                type=\"text\"\r\n                name=\"propietario\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre dueño de la Mascota\"\r\n                onChange={actualizarState}\r\n                value={propietario}\r\n                />\r\n           \r\n           \r\n                <label>Fecha</label>\r\n                <input \r\n                type=\"Date\"\r\n                name=\"fecha\"\r\n                className=\"u-full-width\"\r\n                onChange={actualizarState}\r\n                value={fecha}\r\n                />\r\n           \r\n            \r\n                <label>Hora</label>\r\n                <input \r\n                type=\"time\"\r\n                name=\"hora\"\r\n                className=\"u-full-width\"\r\n                onChange={actualizarState}\r\n                value={hora}\r\n                />\r\n           \r\n          \r\n                <label>Sintomas</label>\r\n                <textarea\r\n                className=\"u-full-width\"\r\n                name=\"sintomas\"\r\n                placeholder=\"Especificacion de los sintomas de su mascota\"\r\n                onChange={actualizarState}\r\n                value={sintomas}\r\n                ></textarea>\r\n            \r\n            <button\r\n                type=\"submit\"\r\n                className=\"u-full-width button-primary\"\r\n            >Agregar cita</button>\r\n            </form>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nFormulario.protoType = {\r\n    crearCita : PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Cita = ({cita,eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Propietario: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button \r\n        className=\"button eliminar u-full-width\"\r\n        onClick = {()=>eliminarCita(cita.id)}\r\n        >Eliminar Cita &times;</button>\r\n    </div>\r\n)\r\n Cita.propTypes = {\r\n     cita: PropTypes.object.isRequired,\r\n     eliminarCita: PropTypes.func.isRequired\r\n    }\r\n\r\nexport default Cita;    ","import React, { Fragment, useState, useEffect} from 'react';\nimport Formulario from './components/formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  //Citas en localStorage\n  let citasIniciales =JSON.parse( localStorage.getItem(\"citas\"));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  //Areglo de CITAS\n   const[citas, guardarCitas]= useState(citasIniciales);\n\n  // realizar ciertas operaciones cuando usseefect escucha cambios\n  useEffect( ()=>{\n    if(citasIniciales){\n      localStorage.setItem(\"citas\",JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"citas\",JSON.stringify([]));\n    }\n  },[citas,citasIniciales])\n\n\n   //Funcion agregando Citas nuevas y lee las anteriores\n   const crearCita = cita => {guardarCitas([...citas, cita])}\n  // funcionCita que elimina por id\n    const eliminarCita = id => { \n    const nuevasCitas = citas.filter(cita => cita.id !== id) ;\n    guardarCitas(nuevasCitas) \n    }  \n    //Modificacion del titulo de segunda columna\n    const titulo2 = citas.length === 0 ? \"Esperando Citas\"   : \"Administra tus Citas\"\n\n\n\n  return (\n    <Fragment>\n      <h1>Administrador de pacientes</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n                <Formulario\n                crearCita = {crearCita}\n                />\n          </div>\n          <div className=\"one-half column\">\n            <h1>{titulo2}</h1>\n            {citas.map(cita => (\n              <Cita\n                key= {Cita.id}\n                cita ={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n\n        </div>\n      </div>\n    </Fragment>\n    \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}